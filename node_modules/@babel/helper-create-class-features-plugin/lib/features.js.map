{"version":3,"names":["_decorators","require","FEATURES","Object","freeze","fields","privateMethods","decorators","privateIn","staticBlocks","exports","featuresSameLoose","Map","featuresKey","looseKey","looseLowPriorityKey","enableFeature","file","feature","loose","hasFeature","canIgnoreLoose","set","get","setLoose","resolvedLoose","higherPriorityPluginName","mask","name","isLoose","Error","undefined","console","warn","shouldTransform","path","decoratorPath","publicFieldPath","privateFieldPath","privateMethodPath","staticBlockPath","hasOwnDecorators","node","el","isClassProperty","isClassPrivateProperty","isClassPrivateMethod","isStaticBlock","buildCodeFrameError"],"sources":["../src/features.ts"],"sourcesContent":["import type { File, types as t } from \"@babel/core\";\nimport type { NodePath } from \"@babel/traverse\";\nimport { hasOwnDecorators } from \"./decorators\";\n\nexport const FEATURES = Object.freeze(\n  process.env.BABEL_8_BREAKING\n    ? {\n        //classes: 1 << 0,\n        fields: 1 << 1,\n        privateMethods: 1 << 2,\n        privateIn: 1 << 3,\n        staticBlocks: 1 << 4,\n      }\n    : {\n        //classes: 1 << 0,\n        fields: 1 << 1,\n        privateMethods: 1 << 2,\n        decorators: 1 << 3,\n        privateIn: 1 << 4,\n        staticBlocks: 1 << 5,\n      },\n);\n\nconst featuresSameLoose = new Map([\n  [FEATURES.fields, \"@babel/plugin-proposal-class-properties\"],\n  [FEATURES.privateMethods, \"@babel/plugin-proposal-private-methods\"],\n  [FEATURES.privateIn, \"@babel/plugin-proposal-private-property-in-object\"],\n]);\n\n// We can't use a symbol because this needs to always be the same, even if\n// this package isn't deduped by npm. e.g.\n//  - node_modules/\n//    - @babel/plugin-class-features\n//    - @babel/plugin-proposal-decorators\n//      - node_modules\n//        - @babel-plugin-class-features\nconst featuresKey = \"@babel/plugin-class-features/featuresKey\";\nconst looseKey = \"@babel/plugin-class-features/looseKey\";\n\n// See https://github.com/babel/babel/issues/11622.\n// Since preset-env sets loose for the fields and private methods plugins, it can\n// cause conflicts with the loose mode set by an explicit plugin in the config.\n// To solve this problem, we ignore preset-env's loose mode if another plugin\n// explicitly sets it\n// The code to handle this logic doesn't check that \"low priority loose\" is always\n// the same. However, it is only set by the preset and not directly by users:\n// unless someone _wants_ to break it, it shouldn't be a problem.\ncons